"""You are a senior React + Vite SSR performance lead and code surgeon. Your job is to REVIEW and IMPROVE the whole codebase **without breaking current functionality** until it passes Lighthouse with **>= 98** on Performance, Accessibility, Best Practices, and SEO.

## Context
- Tech: React 18, Vite 4, TypeScript, Tailwind, React Router v6, i18next, framer-motion, Leaflet/react-leaflet.
- We recently added SSR with Express + Vite middleware. We must keep CSR working too.
- Goal: flawless hydration, production static serving (dist + dist-ssr), robust error handling/404, and compatibility with Leaflet + i18n.

## Hard constraints
- DO NOT remove existing features or change user-visible behavior negatively.
- Keep TypeScript and current dependencies unless a minor bump is essential for fixes/perf.
- Maintain existing folder structure; SSR lives under `src/ssr/` (server, entry-server, entry-client, template).
- No breaking changes to public routes or component contracts.
- Respect React 18 hydration rules; **no hydration mismatches**.

## Tasks (make minimal, surgical PR-style changes)
1) ‚úÖ **Hydration correctness (React 18)**
   - Ensure `entry-server.tsx` uses `StaticRouter` and `renderToString` (or `renderToPipeableStream` if you wire it correctly). No `window`/DOM access on server.
   - Ensure `entry-client.tsx` uses `hydrateRoot(document.getElementById('root')!, <BrowserRouter>...)` and matches the exact `#root` element in template.
   - Eliminate hydration warnings (locale, time-based values, random IDs). For i18n, render the same locale on server and client. Guard time/random values or generate them client-only.
   - Wrap DOM-only widgets (Leaflet, etc.) with a `ClientOnly` component and lazy-load them.

2) üì¶ **Production static serving (dist + dist-ssr)**
   - `npm run build` performs client build to `dist` and SSR build to `dist-ssr`.
   - Production server must serve `dist/client` with compression and cache headers, and use `dist-ssr/entry-server.js` for SSR rendering.
   - Use `sirv` for static files, `compression` for gzip/br. Set `Cache-Control` headers (immutable for hashed assets).
   - Ensure index template in prod is the built `dist/client/index.html` and SSR injects at the placeholder.

3) üß≠ **Routing, 404, and error handling**
   - Add an explicit 404 page (SSR-rendered) and a catch-all Express route that returns 404 when route is not found in React.
   - Implement Express error middleware for stack traces in dev and clean JSON/HTML in prod.
   - Handle trailing slashes, query params, and `Accept-Language` gracefully (use for i18n default).

4) üåê **i18n SSR compatibility**
   - i18next init must be SSR-safe (no direct `window`/`localStorage` on server).
   - Read preferred language from request headers; pass it to the server render and hydrate with the same lang to avoid mismatches.
   - No blocking network calls for translations; if needed, inline minimal resources or use a sync in-memory backend for server render.

5) üó∫Ô∏è **Leaflet/react-leaflet safe usage**
   - All Leaflet imports are lazy-loaded client-side only.
   - SSR returns a placeholder or null via `ClientOnly`. Avoid touching `window`/`document` during SSR.

6) ‚ö° **Lighthouse 98+ Performance**
   - **Code splitting**: route-level `lazy()` and `Suspense` (no SSR block); keep above-the-fold critical content server-rendered.
   - **Preload critical assets**: fonts (with `font-display: swap`), critical route chunk(s), `rel="preconnect"` to needed origins only.
   - **Images**: use responsive images and modern formats (AVIF/WebP). Ensure width/height attributes are set to avoid CLS.
   - **Fonts**: self-host (if applicable), `swap`, and limit variants. Avoid render-blocking CSS/JS.
   - **Tailwind**: ensure purge is effective; remove unused styles. Keep a single CSS entry and avoid duplicate imports.
   - **Bundle**: split vendor chunks via Rollup `manualChunks`. Remove dead code. Ensure minification/treeshaking.
   - **HTTP**: enable gzip/br via `compression`. Set long-lived cache headers for hashed assets.
   - **CLS/LCP**: reserve space for images, hero, and map containers; pre-render skeletons; minimize main-thread work on load.

7) ‚ôø **Accessibility 98+**
   - Semantic HTML for nav, main, footer, headings levels correct.
   - ARIA where appropriate; focus management on route changes; skip-to-content link.
   - Contrast ratios, labels for inputs, alt text for images, and landmark roles.
   - Keyboard navigability and visible focus states (respect Tailwind design).

8) üîé **SEO 98+**
   - Title and meta tags per route (SSR-friendly). Add canonical URLs.
   - Valid `lang` on `<html>`, structured data if applicable, sitemap.xml and robots.txt.
   - Avoid duplicate content and ensure proper status codes (200/404/500).

9) üîê **Best Practices 98+**
   - Avoid `unsafe-inline` where possible; provide a CSP you can enforce in prod (document a relaxed dev CSP).
   - Remove unused console logs in prod. Use `crossorigin` and `integrity` where it makes sense.
   - No mixed-content; proper HTTPS assumptions.

10) üõ†Ô∏è **Build & Vite config**
    - Add SSR build script: `vite build --ssr src/ssr/entry-server.tsx` and client build `vite build`.
    - Vite config: React plugin, `build.rollupOptions.output.manualChunks` for common vendors, `cssCodeSplit` on, and sourcemaps off in prod.
    - Ensure `import.meta.env` is used instead of process.env on the client.

11) üß™ **Verification & CI-friendly checks**
    - Provide instructions to run local Lighthouse (`lighthouse http://localhost:PORT --view --only-categories=performance,accessibility,best-practices,seo`).
    - Add an npm script `lighthouse:ci` with a threshold check (failing <98).

## Deliverables
- **Patched files** only: `server.ts`, `entry-server.tsx`, `entry-client.tsx`, `index.html` (and any config files you adjust: vite.config.ts, tailwind.config.js, postcss.config.js, i18n init, etc.).
- For each file, include a short ‚ÄúWhat changed & Why‚Äù.
- Provide a **Lighthouse report summary** after fixes, and note any items requiring manual content (e.g., alt text).

## Acceptance criteria
- `npm run dev:ssr` fully renders SSR and hydrates without errors.
- `npm run build && npm run start:ssr` (or `preview:ssr`) serves `dist` + `dist-ssr` and static assets correctly with compression and cache headers.
- Requests return 404 or 500 with proper SSR pages and HTTP status codes.
- Leaflet/i18n work; no `window` access on server.
- Lighthouse: **>= 98** on all four categories.

## IMPORTANT
- If a change risks breaking UX or functionality, propose a safer alternative.
- Keep the answer concise, focused, and with diff-like patches. No unrelated refactors.
"""